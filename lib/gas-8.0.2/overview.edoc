@title GAS (General Application Services)
@doc 
<img src="http://www.erlware.org/images/erlware-header.gif"/>

<h2>What GAS Does</h2>
<p>
This comes down two two things; one is config and two is dynamic supervision.
</p>
<p>
 1. Provide a framework for dealing with system wide configuration.
    The application module that comes with standard Erlang does this
    as well but provides only a minimal subset of what GAS provides.
    GAS builds ontop of application and provides functions for
   <ul>
     <li>Pulling config at run time</li>
     <li>Updating config at run time</li>
     <li>Working with and managing config files</li>
     <li>Overriding configuration from the commandline</li>
     <li>Easily set default config values in your code</li>
     <li>Configuration file inheritance</li>
   </ul>
 2. The second function of GAS is to provide a dynamic supervision structure for
    so that applications can share resources and avoid the complications  
    associated with duplicate service process inclusion. For example consider
    what happens when two applications in a release both use a single registered 
    library process like ewl_elwrap_h.erl for wrapping log files. GAS makes 
    sure it is inluded only once for a given release by allowing the startup
    of that process to be setup in configuration instead of as part of
    any given application within a release.
</p>

<h2>Why the name GAS?</h2>
<p>
The <em>GAS</em> application stands for General Application Services.
The argument could be made that this be called general release services and would be a good one.
However the name is historic, the app was created in 2003 and at that time
was simply there to provide enhanced programatic support for 
configuration.
</p>

<h2>Commandline Overriding</h2>

<p>Commandline overriding is accomplished by adding plain arguments to a call to
erl.  Plain arguments are those that are unevaluated by the run time system and
are specified by supplying the -extra flag as the last thing on the commandline.
after the -extra flag you add the -override flag to signal overrides and follow 
that with overrides of the form -&lt;appname&gt; &lt;key&gt; &lt;value&gt;. 
For example if you wanted to override the erts-code entry for the faxien 
application in the config file that looked like:
</p>
```
{faxien, [
          {history, true},
          {erts-codes, [{on, "5.5.5"}}
         [
}
'''
<p>
you could use <pre>-extra -override -faxien erts-code {off, \"5.6.3\"} -faxien history false</pre>.
in order to override more values simply add more -&lt;appname&gt; &lt;key&gt; &lt;value&gt;
entries. Note that quotes both single and double should be escaped on the shell i.e \" or \' 
to ensure the shell does not evaluate them and that they are passed through to the VM.
</p>

<h2>Filebased Config Overriding (Config Inheritance)</h2>
<p>
Config file overrides are accomplished through the following entry into the config file:
</p>

```
{override_file_path, <some-file-path>}
'''

<p>
The override_file_path should be a path, not just a filename. If only a file name is supplied the file is assumed to be off the users home directory. To specifically configure an override file to be relative to a users home directory can be accomplished using the config entry below.
</p>

```
{home_file_path, <some-file-path>}
'''

such as

```
{home_file_path, ".faxien_override.config"}
'''

the above would cause Faxien to look in $HOME for a file called .faxien_override.config to override the config for the release.

<h2>Dynamic Supervision (Singleton Services with Respect to a Release)</h2>

<p>
Let's say that you want to start a service called my_service, which starts by calling it's start link function that takes a
single boolean argument. This can be accomplished by using the following within your gas configuration:
</p>

```
 {gas,
  [
   {mod_specs, [{my_service_key, {my_service, start_link, [false]}}]}
  ]
 },
'''

<p>
The format as you can see is to put the mod_specs config (short for module specs) into your release configuration file. 
The format of this is: {mod_specs, [{ServiceKey, {Module, Function, ArgsList}}]}. Sometimes the arguments that we want to include in an argument list are already present in some other format in the config file. For example, we configure a log file location and then want to start a process via gas to watch that log file. We don't want to have to include the log file location twice in the same config file because that is ugly and prone to error. The situation becomes even more ugly when we get into config overriding.  We would want to use the original config token that so as to avoid having
multiple places to change a value - again, this becomes especially important if you are using config file overriding. These 
argument values get passed to GAS dynamically started services after all config file overriding is complete. Gas provides a method by which you can specify the config tokens you want to use as arguments to your mod specs and also provides a way to run transformations on them to make them suitable for consumption by the service you are starting. Examples are provided below.
</p>

```
 {support_app,
  [
   {version, {production, "5.6.7"}}
  ]
 },

 {gas,
  [
   {mod_specs, [{my_service, {my_service_srv, start_link}}]}

   {wiring, [
             {my_service, [{wire, support_app, version, "{_, Version}:Version"}]}
            ]},
  ]
 },
'''

<p>
That deserves a little explanation. What is going on above is we have supplied the Module and the Function for the service known as my_service without any arguments. This means that GAS will look for "wiring" to define what arguments, potentially sourced from other config pairs, are to be wired up with our service so that ultimately they are passed to Module:Function as arguments potentially having been transformed along the way to render them consumable by the service we are starting with Module:Function(WiredArgs). To do this we add the wiring tuple which takes a list of literal config and wires specifying config to be pulled from elsewhere in the config file or any of it's inherited decendants. In this example we have no literal config, but we do have one wire. In the case where we have more than one wire each wire in the list of wires will be evaluated and provided to as arguments to the Module:Function in the order that it was included. In this case we supply only one {wire, support_app, version, "{_, Version}:Version"}. This is of the form {wire, App, Key, TransformSpec}. It is the tranform spec that says how the configuration value specified by App and Key, in this case the app support_app and the key version, will be transformed and included in the list of arguments to Module:Function. {production, "5.6.7"} is the value of the config pair we have specified and it will be transformed according to the tranformation spec in our wire. Our TransformSpec has two parts, separated with a colon. The first part is the match spec which matches the config tuple with basic pattern matching. The second part stipulates the output term. So in this case with {_, Version} we will ignore the atom 'production' and grab "5.6.7" as Version. To the right of the ":" we have the output side of our expression which indicates that we will output just Version. my_service will be started as such apply(my_service_srv, start_link [Version]). </p>

<p>
Log file rotation and truncation is a good example of where GAS is needed. A problem can arise from this if more than one application in a release includes a general service such as this that could happen to use a registered name, or in the case of file rotation, happens to modify a single resource in a non idempotent manner. As you know GAS allows the owner of a release to configure these services to run on a per release basis instead of a per application basis. Below is a real world example, one you can literally paste into your release config and see work, of how to configure file rotation and trunction with ewl_elwrap_h, which is found in the ewlib application.
</p>

```
 {sasl,   [{sasl_error_logger, {file, "/tmp/sasl_log"}}]},
 
 {gas,
  [
   {mod_specs, [{elwrap, {ewl_elwrap_h, start_link}}]},
   
   {wiring, [
             {elwrap, [
               {wire, sasl, sasl_error_logger, "File:{sasl_error_logger, File}"},
               {err_log, "/tmp/faxien.err_log"},
               {err_log_wrap_info, {{err,5000000,10},{sasl,5000000,10}}},
               {transform_previous, "Args:[Args]"}
              ]}
            ]},
  ]
 },
'''

<p>
Above is about as complex an example as you can have, so lets break it down a bit. Our wiring for this contains a number of entries under the service key elwrap. The first one is a wire indicating that we want to wire and transform the value found in the application config for the 'sasl' application for the key 'sasl_error_logger'.
sasl_error_logger using the transformation spec "File:{sasl_error_logger, File}" where File is the value found for the key 'sasl_error_logger which is {file, "/tmp/sasl_log"}. The transformation says we should take that value and add it into a tuple that has as its first element the atom 'sasl_error_logger'. This yeilds {sasl_error_logger, {file, "/tmp/sasl_log"}} as the first value in our list of arguments. Basically this transformation recreated the exact key value pair originally found in the configuration which is exactly what the elwrap service wants oddly enough. The next entries are not wires, they are literal config. They will be passed as args to our Module Function in the order they appear in the list. So up until now we have three arguments, one wired and the other two literal, in a list ready to be passed to the elwrap service in the order they appear in the list.  The last entry is a bit tricky so pay attention. The final "wire" is a transform previous which takes the list we have built up so far and applies a transform to it as a whole. This transform previous specifies that the list of arguments we have built up should be transformed in such a manner as to create a list of lists. It says Args:[Args] where Args on the left hand side is the argument list we have built up and where the right hand side says to output those args within yet another list [Args]. In this case this is done because we want to pass all the arguments supplied here as a single list to the start_link function in ewl_elwrap_h.  Remember that the way dynamic function application in Erlang works is that it takes a list of arguments such that Module, Function, [Arg1, Arg2] is evaluated essentially as Module:Function(Arg1, Arg2).  So without the final transformation we would have ewl_elwrap_h:start_link(Arg1, Arg2, Arg3) which is not infact what the elwrap service wants, it wants to take all its arguments as a list of options as such ewl_elwrap_h:start_link([Arg1, Arg2, Arg3]) which is what our last conversion gives us by outputting our list of Args as [Args].
</p>

<h2>Configuration Functions</h2>
<p>
Gas provides programatic support for applications to manage pulling and setting their config data.
</p>
   <ul>
     <li>Pulling config at run time</li>
     <li>Updating config at run time</li>
   </ul>
<p>
See the documentation for the gas module for the get_env, set_env, modify_config_file and modify_config_value functions.
</p>

@author Martin Logan
@copyright 2003 - 2009 Erlware
