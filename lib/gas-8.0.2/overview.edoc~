@title GAS (General Application Services)
@doc 
<img src="http://www.erlware.org/images/erlware-header.gif"/>

<h2>What GAS Does</h2>
<p>
This comes down two two things; one is config and two is dynamic supervision.
</p>
<p>
 1. Provide a framework for dealing with system wide configuration.
    The application module that comes with standard Erlang does this
    as well but provides only a minimal subset of what GAS provides.
    GAS builds ontop of application and provides functions for
   <ul>
     <li>Pulling config at run time</li>
     <li>Updating config at run time</li>
     <li>Working with and managing config files</li>
     <li>Overriding configuration from the commandline</li>
     <li>Easily set default config values in your code</li>
     <li>Configuration file inheritance</li>
   </ul>
 2. The second function of GAS is to provide a dynamic supervision structure for
    so that applications can share resources and avoid the complications  
    associated with duplicate service process inclusion. For example consider
    what happens when two applications in a release both use a single registered 
    library process like ewl_elwrap_h.erl for wrapping log files. GAS makes 
    sure it is inluded only once for a given release by allowing the startup
    of that process to be setup in configuration instead of as part of
    any given application within a release.
</p>

<h2>Why the name GAS?</h2>
<p>
The <em>GAS</em> application stands for General Application Services.
The argument could be made that this be called general release services and would be a good one.
However the name is historic, the app was created in 2003 and at that time
was simply there to provide enhanced programatic support for 
configuration.
</p>

<h2>Commandline Overriding</h2>

<p>Commandline overriding is accomplished by adding plain arguments to a call to
erl.  Plain arguments are those that are unevaluated by the run time system and
are specified by supplying the -extra flag as the last thing on the commandline.
after the -extra flag you add the -override flag to signal overrides and follow 
that with overrides of the form -&lt;appname&gt; &lt;key&gt; &lt;value&gt;. 
For example if you wanted to override the erts-code entry for the faxien 
application in the config file that looked like:
</p>
```
{faxien, [
          {history, true},
          {erts-codes, [{on, "5.5.5"}}
         [
}
'''
<p>
you could use <pre>-extra -override -faxien erts-code {off, \"5.6.3\"} -faxien history false</pre>.
in order to override more values simply add more -&lt;appname&gt; &lt;key&gt; &lt;value&gt;
entries. Note that quotes both single and double should be escaped on the shell i.e \" or \' 
to ensure the shell does not evaluate them and that they are passed through to the VM.
</p>

<h2>Filebased Config Overriding (Config Inheritance)</h2>
<p>
Config file overrides are accomplished through the following entry into the config file:
</p>

```
{override_file_path, <some-file-path>}
'''

<p>
The override_file_path should be a path, not just a filename. If only a file name is supplied the file is assumed to be off the users home directory. To specifically configure an override file to be relative to a users home directory can be accomplished using the config entry below.
</p>

```
{home_file_path, <some-file-path>}
'''

such as

```
{home_file_path, ".faxien_override.config"}
'''

the above would cause Faxien to look in $HOME for a file called .faxien_override.config to override the config for the release.

<h2>Dynamic Supervision (Singleton Services with Respect to a Release)</h2>

<p>
Let's say that you want to start a service called my_service, which starts by calling it's start link function that takes a
single boolean argument. This can be accomplished by using the following within your gas configuration:
</p>

```
 {gas,
  [
   {mod_specs, [{my_service_key, {my_service, start_link, [false]}}]}
  ]
 },
'''

<p>
The format as you can see is to put the mod_specs config (short for module specs) into your release configuration file. 
The format of this is: {mod_specs, [{ServiceKey, {Module, Function, ArgsList}}]}. What if the args are already included in the
config file and we want to use them to start our service. Lets say our my_service takes one arg but that happens to come
from config that has already been included in the release config file. We would want to use that so as to avoid having
multiple places to change a value - this becomes especially important if you are using config file overriding. These 
argument values get passed to GAS dynamically started services after all config file overriding is complete.
</p>

```
 {other_app,
  [
   {config_tuple, {true, no_play}}
  ]
 },

 {gas,
  [
   {mod_specs, [{my_service_key, {my_service, start_link}}]}

   {wiring, [
             {my_service_key, [{wire, other_app, boolean_config, "{Bool, _}:Bool"}]}
            ]},
  ]
 },
'''

<p>
That deserves a little explanation. What is going on above is we have supplied the Module and the Function for the
service known to sasl as my_service_key without any arguments. This means that GAS will look for wiring to define
what arguments are passed to the Module:Function. To do this we add the wiring tuple which takes a list of direct
config and wires. In this example we have no direct config, but we do have one wire. Each wire in the list following
the Key will be evaluated and provided to as arguments to the Module:Function in the order that it was found in the
list following the key in the wiring tuple. In this case we supply only one 
{wire, other_app, boolean_config, "{Bool, _}:Bool"}.
This is of the form {wire, App, Key, TransformSpec}. It is the tranform spec that says how the configuration value
specified by App and Key will be transformed and included in the list of arguments to Module:Function. In this case
we have {true, no_play} specified under other_app with key config_tuple. Our TransformSpec has two parts, separated
with a colon. The first part is the match spec which matches the config tuple with basic pattern matching. The second
part stipulates the output term. So in this case we match and bind Bool and specify that the output should be bool 
on it's own. That means that myservice will be started with apply(myservice, start_link [Bool]).
</p>

<p>
Log file rotation and truncation is a good example of where GAS is needed. A problem can arise from this if more than one application in a release includes a general service such as this that could happen to use a registered name, or in the case of file rotation, happens to modify a single resource in a non idempotent manner. As you know GAS allows the owner of a release to configure these services to run on a per release basis instead of a per application basis. Below is a real world example of how to configure file rotation and trunction with ewl_elwrap_h, which is found in the ewlib application, the release config entries would be the following
</p>

```
 {sasl,   [{sasl_error_logger, {file, "/tmp/sasl_log"}}]},
 
 {gas,
  [
   %% indicates the module function and optionally args of the services to startup.
   %% at startup ewl_elwrap_h:start_link() will be called as a result of this entry.
   {mod_specs, [{elwrap, {ewl_elwrap_h, start_link}}]},
   
   {wiring, [
             {elwrap, [
               {wire, sasl, sasl_error_logger, "V:{sasl_error_logger, V}"},
               {err_log, "/tmp/faxien.err_log"},
               {err_log_wrap_info, {{err,5000000,10},{sasl,5000000,10}}},
               {transform_previous, "V:[V]"}
              ]}
            ]},
  ]
 },
'''

<p>
Above is about as complex an example as you can have, so lets break it down a bit. Our wiring for this contains a number of entries under the service key elwrap. The first one is a wire so we transform the value found at the app sasl at key 
sasl_error_logger using the transformation spec "V:{sasl_error_logger, V}" which would yeild {sasl_error_logger, {file, "/tmp/sasl_log"}} as the first value in our list of arguments. The next entries are not wires, they are literal config. They will be passed as args to our Module Function in the order they appear in the list. The last entry is a transform previous which specifies that all the list of args so far accumulated should be transformed according to the tranformation spec provided. In this case this is done because we want to pass all the arguments supplied here as a list to the start_link function in ewl_elwrap_h. Without this we would have apply(ewl_elwrap_h, start_link, [Arg1, Arg2, Arg3]) which would be suitable for ewl_elwrap_h:start_link/3 but not for ewl_elwrap_h:start_link/1 which is indeed the function we want to call as in apply(ewl_elwrap_h, start_link, [[Arg1, Arg2, Arg3]]) 
</p>

<h2>Configuration Functions</h2>
<p>
Gas provides programatic support for applications to manage pulling and setting their config data.
</p>
   <ul>
     <li>Pulling config at run time</li>
     <li>Updating config at run time</li>
   </ul>
<p>
See the documentation for the gas module for the get_env, set_env, modify_config_file and modify_config_value functions.
</p>

@author Martin Logan
@copyright 2003 - 2009 Erlware
